# Copyright (c) 2021 Julian Amann
#
# Licensed under the Apache License, Version 2.0 (the "License")

# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS-IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package(
    default_visibility = ["//visibility:public"],
)

config_setting(
    name = "windows_x86_64",
    values = {"cpu": "x64_windows"},
    visibility = ["//visibility:public"],
)

common_defines = [
    "__SSE__",
    "__SSE2__",
    "TASKING_INTERNAL",
    "EMBREE_TARGET_SSE2",
]

cc_library(
    name = "simd",
    srcs = [
        "common/math/constants.h",
        "common/math/math.h",
        "common/simd/avx.h",
        "common/simd/avx512.h",
        "common/simd/simd.h",
        "common/simd/sse.cpp",
        "common/simd/sse.h",
        "common/simd/varying.h",
        "common/simd/vboold4_avx.h",
        "common/simd/vboold4_avx512.h",
        "common/simd/vboold8_avx512.h",
        "common/simd/vboolf16_avx512.h",
        "common/simd/vboolf4_avx512.h",
        "common/simd/vboolf4_sse2.h",
        "common/simd/vboolf8_avx.h",
        "common/simd/vboolf8_avx512.h",
        "common/simd/vdouble4_avx.h",
        "common/simd/vdouble8_avx512.h",
        "common/simd/vfloat16_avx512.h",
        "common/simd/vfloat4_sse2.h",
        "common/simd/vfloat8_avx.h",
        "common/simd/vint16_avx512.h",
        "common/simd/vint4_sse2.h",
        "common/simd/vint8_avx.h",
        "common/simd/vint8_avx2.h",
        "common/simd/vllong4_avx2.h",
        "common/simd/vllong8_avx512.h",
        "common/simd/vuint16_avx512.h",
        "common/simd/vuint4_sse2.h",
        "common/simd/vuint8_avx.h",
        "common/simd/vuint8_avx2.h",
        "common/sys/alloc.h",
        "common/sys/intrinsics.h",
        "common/sys/platform.h",
    ],
    defines = common_defines,
)

cc_library(
    name = "math",
    srcs = [
        "common/math/affinespace.h",
        "common/math/bbox.h",
        "common/math/col3.h",
        "common/math/col4.h",
        "common/math/color.h",
        "common/math/constants.cpp",
        "common/math/constants.h",
        "common/math/interval.h",
        "common/math/lbbox.h",
        "common/math/linearspace2.h",
        "common/math/linearspace3.h",
        "common/math/math.h",
        "common/math/obbox.h",
        "common/math/quaternion.h",
        "common/math/range.h",
        "common/math/transcendental.h",
        "common/math/vec2.h",
        "common/math/vec2fa.h",
        "common/math/vec3.h",
        "common/math/vec3ba.h",
        "common/math/vec3fa.h",
        "common/math/vec3ia.h",
        "common/math/vec4.h",
        "common/sys/platform.h",
    ],
    defines = common_defines,
)

cc_library(
    name = "sys",
    srcs = [
        "common/sys/alloc.cpp",
        "common/sys/alloc.h",
        "common/sys/array.h",
        "common/sys/atomic.h",
        "common/sys/barrier.cpp",
        "common/sys/barrier.h",
        "common/sys/condition.cpp",
        "common/sys/condition.h",
        "common/sys/filename.cpp",
        "common/sys/filename.h",
        "common/sys/intrinsics.h",
        "common/sys/library.cpp",
        "common/sys/library.h",
        "common/sys/mutex.cpp",
        "common/sys/mutex.h",
        "common/sys/platform.h",
        "common/sys/ref.h",
        "common/sys/regression.cpp",
        "common/sys/regression.h",
        "common/sys/string.cpp",
        "common/sys/string.h",
        "common/sys/sysinfo.cpp",
        "common/sys/sysinfo.h",
        "common/sys/thread.cpp",
        "common/sys/thread.h",
        "common/sys/vector.h",
    ],
    defines = common_defines,
    linkopts = select({
        ":windows_x86_64": [
            "-DEFAULTLIB:advapi32.lib",
        ],
        "//conditions:default": [
        ],
    }),
    deps = [
        ":math",
        ":simd",
    ],
)

cc_library(
    name = "tasking",
    srcs = [
        "common/tasking/taskscheduler.h",
        "common/tasking/taskschedulerinternal.cpp",
        "common/tasking/taskschedulerinternal.h",
        "include/embree3/rtcore.h",
        "include/embree3/rtcore_buffer.h",
        "include/embree3/rtcore_builder.h",
        "include/embree3/rtcore_common.h",
        #"include/embree3/rtcore_config.h",
        "include/embree3/rtcore_device.h",
        "include/embree3/rtcore_geometry.h",
        "include/embree3/rtcore_quaternion.h",
        "include/embree3/rtcore_ray.h",
        "include/embree3/rtcore_scene.h",
    ],
    defines = common_defines,
    includes = ["include/embree3"],
    deps = [
        ":rtcore_config",
        ":sys",
    ],
)

cc_library(
    name = "algorithms",
    srcs = [
        "common/algorithms/parallel_any_of.h",
        "common/algorithms/parallel_filter.cpp",
        "common/algorithms/parallel_filter.h",
        "common/algorithms/parallel_for.cpp",
        "common/algorithms/parallel_for.h",
        "common/algorithms/parallel_for_for.cpp",
        "common/algorithms/parallel_for_for.h",
        "common/algorithms/parallel_for_for_prefix_sum.cpp",
        "common/algorithms/parallel_for_for_prefix_sum.h",
        "common/algorithms/parallel_map.cpp",
        "common/algorithms/parallel_map.h",
        "common/algorithms/parallel_partition.cpp",
        "common/algorithms/parallel_partition.h",
        "common/algorithms/parallel_prefix_sum.cpp",
        "common/algorithms/parallel_prefix_sum.h",
        "common/algorithms/parallel_reduce.cpp",
        "common/algorithms/parallel_reduce.h",
        "common/algorithms/parallel_set.cpp",
        "common/algorithms/parallel_set.h",
        "common/algorithms/parallel_sort.cpp",
        "common/algorithms/parallel_sort.h",
    ],
    defines = common_defines,
    deps = [":tasking"],
)

cc_library(
    name = "lexers",
    srcs = [
        "common/lexers/parsestream.h",
        "common/lexers/stream.h",
        "common/lexers/streamfilters.h",
        "common/lexers/stringstream.cpp",
        "common/lexers/stringstream.h",
        "common/lexers/tokenstream.cpp",
        "common/lexers/tokenstream.h",
    ],
    defines = common_defines,
    deps = [":sys"],
)

cc_library(
    name = "embree",
    srcs = [
        "kernels/builders/primrefgen.cpp",
        "kernels/bvh/bvh.cpp",
        "kernels/bvh/bvh4_factory.cpp",
        "kernels/bvh/bvh8_factory.cpp",
        "kernels/bvh/bvh_builder.cpp",
        "kernels/bvh/bvh_builder_hair.cpp",
        "kernels/bvh/bvh_builder_hair_mb.cpp",
        "kernels/bvh/bvh_builder_morton.cpp",
        "kernels/bvh/bvh_builder_sah.cpp",
        "kernels/bvh/bvh_builder_sah_mb.cpp",
        "kernels/bvh/bvh_builder_sah_spatial.cpp",
        "kernels/bvh/bvh_builder_twolevel.cpp",
        "kernels/bvh/bvh_collider.cpp",
        "kernels/bvh/bvh_intersector_hybrid4_bvh4.cpp",
        "kernels/bvh/bvh_intersector_stream_bvh4.cpp",
        "kernels/bvh/bvh_intersector_stream_filters.cpp",
        "kernels/bvh/bvh_intersector_stream.cpp",
        "kernels/bvh/bvh_intersector1.cpp",
        "kernels/bvh/bvh_intersector1_bvh4.cpp",
        "kernels/bvh/bvh_refit.cpp",
        "kernels/bvh/bvh_rotate.cpp",
        "kernels/bvh/bvh_statistics.cpp",
        "kernels/common/acceln.cpp",
        "kernels/common/accelset.cpp",
        "kernels/common/alloc.cpp",
        "kernels/common/device.cpp",
        "kernels/common/geometry.cpp",
        "kernels/common/motion_derivative.cpp",
        "kernels/common/rtcore.cpp",
        "kernels/common/rtcore_builder.cpp",
        "kernels/common/scene.cpp",
        "kernels/common/scene_curves.cpp",
        "kernels/common/scene_grid_mesh.cpp",
        "kernels/common/scene_instance.cpp",
        "kernels/common/scene_line_segments.cpp",
        "kernels/common/scene_points.cpp",
        "kernels/common/scene_quad_mesh.cpp",
        "kernels/common/scene_triangle_mesh.cpp",
        "kernels/common/scene_user_geometry.cpp",
        "kernels/common/stat.cpp",
        "kernels/common/state.cpp",
        "kernels/geometry/curve_intersector_virtual.cpp",
        "kernels/geometry/curve_intersector_virtual2.cpp",
        "kernels/geometry/instance_intersector.cpp",
        "kernels/geometry/primitive4.cpp",
        "kernels/subdiv/bezier_curve.cpp",
        "kernels/subdiv/bspline_curve.cpp",
        "kernels/subdiv/catmullrom_curve.cpp",
    ] + glob(["kernels/**/*.h"]),
    hdrs = [
        "include/embree3/rtcore.h",
        "include/embree3/rtcore.isph",
        "include/embree3/rtcore_buffer.h",
        "include/embree3/rtcore_buffer.isph",
        "include/embree3/rtcore_builder.h",
        "include/embree3/rtcore_common.h",
        "include/embree3/rtcore_common.isph",
        "include/embree3/rtcore_config.h",
        "include/embree3/rtcore_device.h",
        "include/embree3/rtcore_device.isph",
        "include/embree3/rtcore_geometry.h",
        "include/embree3/rtcore_geometry.isph",
        "include/embree3/rtcore_quaternion.h",
        "include/embree3/rtcore_quaternion.isph",
        "include/embree3/rtcore_ray.h",
        "include/embree3/rtcore_ray.isph",
        "include/embree3/rtcore_scene.h",
        "include/embree3/rtcore_scene.isph",
    ],
    copts = select({
        ":windows_x86_64": [],
        "//conditions:default": [
            "-Wno-error",
        ],
    }),
    defines = common_defines + ["EMBREE_LOWEST_ISA"],
    includes = [
        "include",
        #"kernels",
        #"kernels/bvh",
        #"kernels/common",
    ],
    linkopts =
        select({
            ":windows_x86_64": [],
            "//conditions:default": [
                "-ldl",
                "-lpthread",
                "-lrt",
            ],
        }),
    textual_hdrs = [
        "kernels/bvh/bvh_intersector1.cpp",
        "kernels/bvh/bvh_intersector_hybrid.cpp",
        "kernels/bvh/bvh_intersector_stream.cpp",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":algorithms",
        #":embree_avx2",
        #":embree_sse42",
        ":kernels_config",
        ":kernels_hash",
        ":lexers",
    ],
)

#cc_library(
#    name = "embree_sse42",
#    srcs = [
#        "kernels/bvh/bvh_intersector_hybrid.cpp",
#        "kernels/bvh/bvh_intersector1.cpp",
#        "kernels/bvh/bvh_intersector_hybrid4_bvh4.cpp",
#        "kernels/bvh/bvh_intersector_stream_bvh4.cpp",
#        "kernels/bvh/bvh_intersector_stream_filters.cpp",
#        "kernels/bvh/bvh_intersector_stream.cpp",
#        "kernels/bvh/bvh_intersector1_bvh4.cpp",
#        "kernels/common/scene_subdiv_mesh.cpp",
#        "kernels/geometry/curve_intersector_virtual.cpp",
#        "kernels/geometry/curve_intersector_virtual2.cpp",
#        "kernels/geometry/grid_soa.cpp",
#        "kernels/geometry/instance_intersector.cpp",
#        "kernels/subdiv/subdivpatch1base_eval.cpp",
#    ] + glob(
#        ["kernels/**/*.h"],
#        exclude = [],
#    ),
#    defines = [
#        "__SSE__",
#        "__SSE2__",
#        "__SSE3__",
#        "__SSSE3__",
#        "__SSE4_1__",
#        "__SSE4_2__",
#        "TASKING_INTERNAL",
#        "EMBREE_TARGET_SSE2",
#        "EMBREE_TARGET_SSE42",
#        "EMBREE_TARGET_AVX",
#        "EMBREE_TARGET_AVX2",
#    ],
#    includes = [
#        "include",
#        "kernels",
#        "kernels/bvh",
#    ],
#    visibility = ["//visibility:public"],
#    deps = [
#        ":algorithms",
#        ":kernels_config",
#        ":lexers",
#    ],
#)

#cc_library(
#    name = "embree_avx",
#    srcs = [
#        "kernels/geometry/instance_intersector.cpp",
#        "kernels/geometry/curve_intersector_virtual.cpp",
#        "kernels/geometry/curve_intersector_virtual2.cpp",
#        "kernels/bvh/bvh_intersector1_bvh4.cpp",
#        "kernels/geometry/primitive8.cpp",
#        "kernels/common/scene_user_geometry.cpp",
#        "kernels/common/scene_instance.cpp",
#        "kernels/common/scene_triangle_mesh.cpp",
#        "kernels/common/scene_quad_mesh.cpp",
#        "kernels/common/scene_curves.cpp",
#        "kernels/common/scene_line_segments.cpp",
#        "kernels/common/scene_grid_mesh.cpp",
#        "kernels/common/scene_points.cpp",
#        "kernels/bvh/bvh_collider.cpp",
#        "kernels/bvh/bvh_refit.cpp",
#        "kernels/bvh/bvh_builder.cpp",
#        "kernels/bvh/bvh_builder_hair.cpp",
#        "kernels/bvh/bvh_builder_hair_mb.cpp",
#        "kernels/bvh/bvh_builder_sah.cpp",
#        "kernels/bvh/bvh_builder_sah_spatial.cpp",
#        "kernels/bvh/bvh_builder_sah_mb.cpp",
#        "kernels/bvh/bvh_builder_twolevel.cpp",
#        "kernels/bvh/bvh_builder_subdiv.cpp",
#        "kernels/bvh/bvh_builder_morton.cpp",
#        "kernels/bvh/bvh_rotate.cpp",
#        "kernels/builders/primrefgen.cpp",
#        "kernels/bvh/bvh_intersector1_bvh8.cpp",
#        "kernels/bvh/bvh.cpp",
#        "kernels/bvh/bvh_statistics.cpp",
#        "kernels/common/scene_subdiv_mesh.cpp",
#        "kernels/geometry/grid_soa.cpp",
#        "kernels/subdiv/subdivpatch1base_eval.cpp",
#        "kernels/bvh/bvh_intersector_hybrid4_bvh4.cpp",
#        "kernels/bvh/bvh_intersector_stream_bvh4.cpp",
#        "kernels/bvh/bvh_intersector_stream_filters.cpp",
#        "kernels/bvh/bvh_intersector_hybrid8_bvh4.cpp",
#        "kernels/bvh/bvh_intersector_hybrid4_bvh8.cpp",
#        "kernels/bvh/bvh_intersector_hybrid8_bvh8.cpp",
#        "kernels/bvh/bvh_intersector_stream_bvh8.cpp",
#    ] + glob(
#        ["kernels/**/*.h"],
#        exclude = [],
#    ),
#    defines = [
#        "__SSE__",
#        "__SSE2__",
#        "__SSE3__",
#        "__SSSE3__",
#        "__SSE4_1__",
#        "__SSE4_2__",
#        "TASKING_INTERNAL",
#        "EMBREE_TARGET_SSE2",
#        "EMBREE_TARGET_SSE42",
#        "EMBREE_TARGET_AVX",
#        "EMBREE_TARGET_AVX2",
#    ],
#    includes = [
#        "include",
#        "kernels",
#        "kernels/bvh",
#    ],
#    visibility = ["//visibility:public"],
#    deps = [
#        ":algorithms",
#        ":kernels_config",
#        ":lexers",
#    ],
#)

#cc_library(
#    name = "embree_avx2",
#    srcs = [
#        "kernels/builders/primrefgen.cpp",
#        "kernels/bvh/bvh_builder_hair_mb.cpp",
#        "kernels/bvh/bvh_builder_hair.cpp",
#        "kernels/bvh/bvh_builder_morton.cpp",
#        "kernels/bvh/bvh_builder_sah_mb.cpp",
#        "kernels/bvh/bvh_builder_sah_spatial.cpp",
#        "kernels/bvh/bvh_builder_sah.cpp",
#        "kernels/bvh/bvh_builder_subdiv.cpp",
#        "kernels/bvh/bvh_builder_twolevel.cpp",
#        "kernels/bvh/bvh_builder.cpp",
#        "kernels/bvh/bvh_collider.cpp",
#        "kernels/bvh/bvh_intersector_hybrid4_bvh4.cpp",
#        "kernels/bvh/bvh_intersector_hybrid4_bvh8.cpp",
#        "kernels/bvh/bvh_intersector_hybrid8_bvh4.cpp",
#        "kernels/bvh/bvh_intersector_hybrid8_bvh8.cpp",
#        "kernels/bvh/bvh_intersector_stream_bvh4.cpp",
#        "kernels/bvh/bvh_intersector_stream_bvh8.cpp",
#        "kernels/bvh/bvh_intersector_stream_filters.cpp",
#        "kernels/bvh/bvh_intersector1_bvh4.cpp",
#        "kernels/bvh/bvh_intersector1_bvh8.cpp",
#        "kernels/bvh/bvh_refit.cpp",
#        "kernels/bvh/bvh_rotate.cpp",
#        "kernels/common/scene_curves.cpp",
#        "kernels/common/scene_grid_mesh.cpp",
#        "kernels/common/scene_instance.cpp",
#        "kernels/common/scene_line_segments.cpp",
#        "kernels/common/scene_points.cpp",
#        "kernels/common/scene_quad_mesh.cpp",
#        "kernels/common/scene_subdiv_mesh.cpp",
#        "kernels/common/scene_triangle_mesh.cpp",
#        "kernels/common/scene_user_geometry.cpp",
#        "kernels/geometry/curve_intersector_virtual.cpp",
#        "kernels/geometry/curve_intersector_virtual2.cpp",
#        "kernels/geometry/grid_soa.cpp",
#        "kernels/geometry/instance_intersector.cpp",
#        "kernels/subdiv/subdivpatch1base_eval.cpp",
#    ] + glob(["kernels/**/*.h"]),
#    defines = [
#        "__SSE__",
#        "__SSE2__",
#        "__SSE3__",
#        "__SSSE3__",
#        "__SSE4_1__",
#        "__SSE4_2__",
#        "TASKING_INTERNAL",
#        "EMBREE_TARGET_SSE2",
#        "EMBREE_TARGET_SSE42",
#        "EMBREE_TARGET_AVX",
#        "EMBREE_TARGET_AVX2",
#    ],
#    includes = [
#        "include",
#        "kernels/bvh",
#    ],
#    visibility = ["//visibility:public"],
#    deps = [
#        ":algorithms",
#        ":lexers",
#    ],
#)

cc_binary(
    name = "testbed",
    srcs = ["main.cpp"],
    deps = [":embree"],
)

# generate "include/embree3/rtcore_config.h"
RT_CONFIG_CORE_H = """
// Copyright 2009-2020 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

#pragma once

#define RTC_VERSION_MAJOR 3
#define RTC_VERSION_MINOR 12
#define RTC_VERSION_PATCH 1
#define RTC_VERSION 31201
#define RTC_VERSION_STRING "3.12.1"

#define RTC_MAX_INSTANCE_LEVEL_COUNT 1

#define EMBREE_MIN_WIDTH 0
#define RTC_MIN_WIDTH EMBREE_MIN_WIDTH

#define EMBREE_STATIC_LIB
/* #undef EMBREE_API_NAMESPACE */

#if defined(EMBREE_API_NAMESPACE)
#  define RTC_NAMESPACE 
#  define RTC_NAMESPACE_BEGIN namespace  {
#  define RTC_NAMESPACE_END }
#  define RTC_NAMESPACE_USE using namespace ;
#  define RTC_API_EXTERN_C
#  undef EMBREE_API_NAMESPACE
#else
#  define RTC_NAMESPACE_BEGIN
#  define RTC_NAMESPACE_END
#  define RTC_NAMESPACE_USE
#  if defined(__cplusplus)
#    define RTC_API_EXTERN_C extern "C"
#  else
#    define RTC_API_EXTERN_C
#  endif
#endif

#if defined(ISPC)
#  define RTC_API_IMPORT extern "C" unmasked
#  define RTC_API_EXPORT extern "C" unmasked
#elif defined(EMBREE_STATIC_LIB)
#  define RTC_API_IMPORT RTC_API_EXTERN_C
#  define RTC_API_EXPORT RTC_API_EXTERN_C
#elif defined(_WIN32)
#  define RTC_API_IMPORT RTC_API_EXTERN_C __declspec(dllimport)
#  define RTC_API_EXPORT RTC_API_EXTERN_C __declspec(dllexport)
#else
#  define RTC_API_IMPORT RTC_API_EXTERN_C
#  define RTC_API_EXPORT RTC_API_EXTERN_C __attribute__ ((visibility ("default")))
#endif

#if defined(RTC_EXPORT_API)
#  define RTC_API RTC_API_EXPORT
#else
#  define RTC_API RTC_API_IMPORT
#endif
"""

genrule(
    name = "generate_rtcore_config",
    outs = ["//:include/embree3/rtcore_config.h"],
    cmd = ("echo '%s' > $(OUTS)" % RT_CONFIG_CORE_H),
    visibility = ["//visibility:private"],
)

cc_library(
    name = "rtcore_config",
    srcs = [],
    hdrs = ["//:include/embree3/rtcore_config.h"],
    visibility = ["//visibility:public"],
)

# generate "embree/kernels/config.h"

KRENEL_CONFIG_H = """
// Copyright 2009-2020 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

/* #undef EMBREE_RAY_MASK */
/* #undef EMBREE_STAT_COUNTERS */
/* #undef EMBREE_BACKFACE_CULLING */
/* #undef EMBREE_BACKFACE_CULLING_CURVES */
/* #undef EMBREE_FILTER_FUNCTION */
/* #undef EMBREE_IGNORE_INVALID_RAYS */
#define EMBREE_GEOMETRY_TRIANGLE
/* #undef EMBREE_GEOMETRY_QUAD */
/* #undef EMBREE_GEOMETRY_CURVE */
/* #undef EMBREE_GEOMETRY_SUBDIVISION */
/* #undef EMBREE_GEOMETRY_USER */
/* #undef EMBREE_GEOMETRY_INSTANCE */
/* #undef EMBREE_GEOMETRY_GRID */
/* #undef EMBREE_GEOMETRY_POINT */
#define EMBREE_RAY_PACKETS
/* #undef EMBREE_COMPACT_POLYS */

#define EMBREE_CURVE_SELF_INTERSECTION_AVOIDANCE_FACTOR 2.0

#if defined(EMBREE_GEOMETRY_TRIANGLE)
  #define IF_ENABLED_TRIS(x) x
#else
  #define IF_ENABLED_TRIS(x)
#endif

#if defined(EMBREE_GEOMETRY_QUAD)
  #define IF_ENABLED_QUADS(x) x
#else
  #define IF_ENABLED_QUADS(x)
#endif

#if defined(EMBREE_GEOMETRY_CURVE) || defined(EMBREE_GEOMETRY_POINT)
  #define IF_ENABLED_CURVES_OR_POINTS(x) x
#else
  #define IF_ENABLED_CURVES_OR_POINTS(x)
#endif

#if defined(EMBREE_GEOMETRY_CURVE)
  #define IF_ENABLED_CURVES(x) x
#else
  #define IF_ENABLED_CURVES(x)
#endif

#if defined(EMBREE_GEOMETRY_POINT)
  #define IF_ENABLED_POINTS(x) x
#else
  #define IF_ENABLED_POINTS(x)
#endif

#if defined(EMBREE_GEOMETRY_SUBDIVISION)
  #define IF_ENABLED_SUBDIV(x) x
#else
  #define IF_ENABLED_SUBDIV(x)
#endif

#if defined(EMBREE_GEOMETRY_USER)
  #define IF_ENABLED_USER(x) x
#else
  #define IF_ENABLED_USER(x)
#endif

#if defined(EMBREE_GEOMETRY_INSTANCE)
  #define IF_ENABLED_INSTANCE(x) x
#else
  #define IF_ENABLED_INSTANCE(x)
#endif

#if defined(EMBREE_GEOMETRY_GRID)
  #define IF_ENABLED_GRIDS(x) x
#else
  #define IF_ENABLED_GRIDS(x)
#endif
"""

genrule(
    name = "generate_kernels_config",
    outs = ["//:kernels/config.h"],
    cmd = ("echo '%s' > $(OUTS)" % KRENEL_CONFIG_H),
    visibility = ["//visibility:private"],
)

cc_library(
    name = "kernels_config",
    srcs = [],
    hdrs = ["//:kernels/config.h"],
    visibility = ["//visibility:public"],
)

# generate "embree/kernels/hash.h"

KERNELS_HASH_H = """
// Copyright 2009-2020 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

#define RTC_HASH ""
"""

genrule(
    name = "generate_kernels_hash",
    outs = ["//:kernels/hash.h"],
    cmd = ("echo '%s' > $(OUTS)" % KERNELS_HASH_H),
    visibility = ["//visibility:private"],
)

cc_library(
    name = "kernels_hash",
    srcs = [],
    hdrs = ["//:kernels/hash.h"],
    visibility = ["//visibility:public"],
)
